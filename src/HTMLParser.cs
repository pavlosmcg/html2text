//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HTMLParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class HTMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HTML_COMMENT=1, HTML_CONDITIONAL_COMMENT=2, XML=3, CDATA=4, DTD=5, SCRIPTLET=6,
		SEA_WS=7, SCRIPT_OPEN=8, STYLE_OPEN=9, TAG_OPEN=10, HTML_TEXT=11, TAG_CLOSE=12,
		TAG_SLASH_CLOSE=13, TAG_SLASH=14, TAG_EQUALS=15, TAG_NAME=16, TAG_WHITESPACE=17,
		SCRIPT_BODY=18, SCRIPT_SHORT_BODY=19, STYLE_BODY=20, STYLE_SHORT_BODY=21,
		ATTVALUE_VALUE=22, ATTRIBUTE=23;
	public const int
		RULE_htmlDocument = 0, RULE_scriptletOrSeaWs = 1, RULE_htmlElements = 2,
		RULE_htmlElement = 3, RULE_htmlContent = 4, RULE_htmlAttribute = 5, RULE_htmlChardata = 6,
		RULE_htmlMisc = 7, RULE_htmlComment = 8, RULE_script = 9, RULE_style = 10;
	public static readonly string[] ruleNames = {
		"htmlDocument", "scriptletOrSeaWs", "htmlElements", "htmlElement", "htmlContent",
		"htmlAttribute", "htmlChardata", "htmlMisc", "htmlComment", "script",
		"style"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'<'", null,
		"'>'", "'/>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HTML_COMMENT", "HTML_CONDITIONAL_COMMENT", "XML", "CDATA", "DTD",
		"SCRIPTLET", "SEA_WS", "SCRIPT_OPEN", "STYLE_OPEN", "TAG_OPEN", "HTML_TEXT",
		"TAG_CLOSE", "TAG_SLASH_CLOSE", "TAG_SLASH", "TAG_EQUALS", "TAG_NAME",
		"TAG_WHITESPACE", "SCRIPT_BODY", "SCRIPT_SHORT_BODY", "STYLE_BODY", "STYLE_SHORT_BODY",
		"ATTVALUE_VALUE", "ATTRIBUTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HTMLParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static HTMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HTMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HTMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class HtmlDocumentContext : ParserRuleContext {
		public ScriptletOrSeaWsContext[] scriptletOrSeaWs() {
			return GetRuleContexts<ScriptletOrSeaWsContext>();
		}
		public ScriptletOrSeaWsContext scriptletOrSeaWs(int i) {
			return GetRuleContext<ScriptletOrSeaWsContext>(i);
		}
		public ITerminalNode XML() { return GetToken(HTMLParser.XML, 0); }
		public ITerminalNode DTD() { return GetToken(HTMLParser.DTD, 0); }
		public HtmlElementsContext[] htmlElements() {
			return GetRuleContexts<HtmlElementsContext>();
		}
		public HtmlElementsContext htmlElements(int i) {
			return GetRuleContext<HtmlElementsContext>(i);
		}
		public HtmlDocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlDocument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlDocumentContext htmlDocument() {
		HtmlDocumentContext _localctx = new HtmlDocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_htmlDocument);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 22; scriptletOrSeaWs();
					}
					}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==XML) {
				{
				State = 28; Match(XML);
				}
			}

			State = 34;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 31; scriptletOrSeaWs();
					}
					}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DTD) {
				{
				State = 37; Match(DTD);
				}
			}

			State = 43;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 40; scriptletOrSeaWs();
					}
					}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HTML_COMMENT) | (1L << HTML_CONDITIONAL_COMMENT) | (1L << SCRIPTLET) | (1L << SEA_WS) | (1L << SCRIPT_OPEN) | (1L << STYLE_OPEN) | (1L << TAG_OPEN))) != 0)) {
				{
				{
				State = 46; htmlElements();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptletOrSeaWsContext : ParserRuleContext {
		public ITerminalNode SCRIPTLET() { return GetToken(HTMLParser.SCRIPTLET, 0); }
		public ITerminalNode SEA_WS() { return GetToken(HTMLParser.SEA_WS, 0); }
		public ScriptletOrSeaWsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptletOrSeaWs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScriptletOrSeaWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptletOrSeaWsContext scriptletOrSeaWs() {
		ScriptletOrSeaWsContext _localctx = new ScriptletOrSeaWsContext(Context, State);
		EnterRule(_localctx, 2, RULE_scriptletOrSeaWs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_la = TokenStream.LA(1);
			if ( !(_la==SCRIPTLET || _la==SEA_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementsContext : ParserRuleContext {
		public HtmlElementContext htmlElement() {
			return GetRuleContext<HtmlElementContext>(0);
		}
		public HtmlMiscContext[] htmlMisc() {
			return GetRuleContexts<HtmlMiscContext>();
		}
		public HtmlMiscContext htmlMisc(int i) {
			return GetRuleContext<HtmlMiscContext>(i);
		}
		public HtmlElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementsContext htmlElements() {
		HtmlElementsContext _localctx = new HtmlElementsContext(Context, State);
		EnterRule(_localctx, 4, RULE_htmlElements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HTML_COMMENT) | (1L << HTML_CONDITIONAL_COMMENT) | (1L << SEA_WS))) != 0)) {
				{
				{
				State = 54; htmlMisc();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60; htmlElement();
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 61; htmlMisc();
					}
					}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementContext : ParserRuleContext {
		public ITerminalNode[] TAG_OPEN() { return GetTokens(HTMLParser.TAG_OPEN); }
		public ITerminalNode TAG_OPEN(int i) {
			return GetToken(HTMLParser.TAG_OPEN, i);
		}
		public ITerminalNode[] TAG_NAME() { return GetTokens(HTMLParser.TAG_NAME); }
		public ITerminalNode TAG_NAME(int i) {
			return GetToken(HTMLParser.TAG_NAME, i);
		}
		public ITerminalNode[] TAG_CLOSE() { return GetTokens(HTMLParser.TAG_CLOSE); }
		public ITerminalNode TAG_CLOSE(int i) {
			return GetToken(HTMLParser.TAG_CLOSE, i);
		}
		public ITerminalNode TAG_SLASH_CLOSE() { return GetToken(HTMLParser.TAG_SLASH_CLOSE, 0); }
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public HtmlContentContext htmlContent() {
			return GetRuleContext<HtmlContentContext>(0);
		}
		public ITerminalNode TAG_SLASH() { return GetToken(HTMLParser.TAG_SLASH, 0); }
		public ITerminalNode SCRIPTLET() { return GetToken(HTMLParser.SCRIPTLET, 0); }
		public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		public StyleContext style() {
			return GetRuleContext<StyleContext>(0);
		}
		public HtmlElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementContext htmlElement() {
		HtmlElementContext _localctx = new HtmlElementContext(Context, State);
		EnterRule(_localctx, 6, RULE_htmlElement);
		int _la;
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TAG_OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; Match(TAG_OPEN);
				State = 68; Match(TAG_NAME);
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TAG_NAME) {
					{
					{
					State = 69; htmlAttribute();
					}
					}
					State = 74;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 85;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TAG_CLOSE:
					{
					State = 75; Match(TAG_CLOSE);
					State = 82;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						State = 76; htmlContent();
						State = 77; Match(TAG_OPEN);
						State = 78; Match(TAG_SLASH);
						State = 79; Match(TAG_NAME);
						State = 80; Match(TAG_CLOSE);
						}
						break;
					}
					}
					break;
				case TAG_SLASH_CLOSE:
					{
					State = 84; Match(TAG_SLASH_CLOSE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SCRIPTLET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; Match(SCRIPTLET);
				}
				break;
			case SCRIPT_OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 88; script();
				}
				break;
			case STYLE_OPEN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; style();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlContentContext : ParserRuleContext {
		public HtmlChardataContext[] htmlChardata() {
			return GetRuleContexts<HtmlChardataContext>();
		}
		public HtmlChardataContext htmlChardata(int i) {
			return GetRuleContext<HtmlChardataContext>(i);
		}
		public HtmlElementContext[] htmlElement() {
			return GetRuleContexts<HtmlElementContext>();
		}
		public HtmlElementContext htmlElement(int i) {
			return GetRuleContext<HtmlElementContext>(i);
		}
		public ITerminalNode[] CDATA() { return GetTokens(HTMLParser.CDATA); }
		public ITerminalNode CDATA(int i) {
			return GetToken(HTMLParser.CDATA, i);
		}
		public HtmlCommentContext[] htmlComment() {
			return GetRuleContexts<HtmlCommentContext>();
		}
		public HtmlCommentContext htmlComment(int i) {
			return GetRuleContext<HtmlCommentContext>(i);
		}
		public HtmlContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlContentContext htmlContent() {
		HtmlContentContext _localctx = new HtmlContentContext(Context, State);
		EnterRule(_localctx, 8, RULE_htmlContent);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEA_WS || _la==HTML_TEXT) {
				{
				State = 92; htmlChardata();
				}
			}

			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 98;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SCRIPTLET:
					case SCRIPT_OPEN:
					case STYLE_OPEN:
					case TAG_OPEN:
						{
						State = 95; htmlElement();
						}
						break;
					case CDATA:
						{
						State = 96; Match(CDATA);
						}
						break;
					case HTML_COMMENT:
					case HTML_CONDITIONAL_COMMENT:
						{
						State = 97; htmlComment();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 101;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SEA_WS || _la==HTML_TEXT) {
						{
						State = 100; htmlChardata();
						}
					}

					}
					}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeContext : ParserRuleContext {
		public ITerminalNode TAG_NAME() { return GetToken(HTMLParser.TAG_NAME, 0); }
		public ITerminalNode TAG_EQUALS() { return GetToken(HTMLParser.TAG_EQUALS, 0); }
		public ITerminalNode ATTVALUE_VALUE() { return GetToken(HTMLParser.ATTVALUE_VALUE, 0); }
		public HtmlAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeContext htmlAttribute() {
		HtmlAttributeContext _localctx = new HtmlAttributeContext(Context, State);
		EnterRule(_localctx, 10, RULE_htmlAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(TAG_NAME);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG_EQUALS) {
				{
				State = 109; Match(TAG_EQUALS);
				State = 110; Match(ATTVALUE_VALUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlChardataContext : ParserRuleContext {
		public ITerminalNode HTML_TEXT() { return GetToken(HTMLParser.HTML_TEXT, 0); }
		public ITerminalNode SEA_WS() { return GetToken(HTMLParser.SEA_WS, 0); }
		public HtmlChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlChardata; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlChardata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlChardataContext htmlChardata() {
		HtmlChardataContext _localctx = new HtmlChardataContext(Context, State);
		EnterRule(_localctx, 12, RULE_htmlChardata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !(_la==SEA_WS || _la==HTML_TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlMiscContext : ParserRuleContext {
		public HtmlCommentContext htmlComment() {
			return GetRuleContext<HtmlCommentContext>(0);
		}
		public ITerminalNode SEA_WS() { return GetToken(HTMLParser.SEA_WS, 0); }
		public HtmlMiscContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlMisc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlMisc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlMiscContext htmlMisc() {
		HtmlMiscContext _localctx = new HtmlMiscContext(Context, State);
		EnterRule(_localctx, 14, RULE_htmlMisc);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HTML_COMMENT:
			case HTML_CONDITIONAL_COMMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; htmlComment();
				}
				break;
			case SEA_WS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(SEA_WS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlCommentContext : ParserRuleContext {
		public ITerminalNode HTML_COMMENT() { return GetToken(HTMLParser.HTML_COMMENT, 0); }
		public ITerminalNode HTML_CONDITIONAL_COMMENT() { return GetToken(HTMLParser.HTML_CONDITIONAL_COMMENT, 0); }
		public HtmlCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlComment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlCommentContext htmlComment() {
		HtmlCommentContext _localctx = new HtmlCommentContext(Context, State);
		EnterRule(_localctx, 16, RULE_htmlComment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_la = TokenStream.LA(1);
			if ( !(_la==HTML_COMMENT || _la==HTML_CONDITIONAL_COMMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode SCRIPT_OPEN() { return GetToken(HTMLParser.SCRIPT_OPEN, 0); }
		public ITerminalNode SCRIPT_BODY() { return GetToken(HTMLParser.SCRIPT_BODY, 0); }
		public ITerminalNode SCRIPT_SHORT_BODY() { return GetToken(HTMLParser.SCRIPT_SHORT_BODY, 0); }
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 18, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(SCRIPT_OPEN);
			State = 122;
			_la = TokenStream.LA(1);
			if ( !(_la==SCRIPT_BODY || _la==SCRIPT_SHORT_BODY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StyleContext : ParserRuleContext {
		public ITerminalNode STYLE_OPEN() { return GetToken(HTMLParser.STYLE_OPEN, 0); }
		public ITerminalNode STYLE_BODY() { return GetToken(HTMLParser.STYLE_BODY, 0); }
		public ITerminalNode STYLE_SHORT_BODY() { return GetToken(HTMLParser.STYLE_SHORT_BODY, 0); }
		public StyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_style; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHTMLParserVisitor<TResult> typedVisitor = visitor as IHTMLParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStyle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StyleContext style() {
		StyleContext _localctx = new StyleContext(Context, State);
		EnterRule(_localctx, 20, RULE_style);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(STYLE_OPEN);
			State = 125;
			_la = TokenStream.LA(1);
			if ( !(_la==STYLE_BODY || _la==STYLE_SHORT_BODY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
		'\x5964', '\x3', '\x19', '\x82', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\a', '\x2', '\x1A', '\n', '\x2',
		'\f', '\x2', '\xE', '\x2', '\x1D', '\v', '\x2', '\x3', '\x2', '\x5', '\x2',
		' ', '\n', '\x2', '\x3', '\x2', '\a', '\x2', '#', '\n', '\x2', '\f', '\x2',
		'\xE', '\x2', '&', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', ')', '\n',
		'\x2', '\x3', '\x2', '\a', '\x2', ',', '\n', '\x2', '\f', '\x2', '\xE',
		'\x2', '/', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x32', '\n', '\x2',
		'\f', '\x2', '\xE', '\x2', '\x35', '\v', '\x2', '\x3', '\x3', '\x3', '\x3',
		'\x3', '\x4', '\a', '\x4', ':', '\n', '\x4', '\f', '\x4', '\xE', '\x4',
		'=', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x41', '\n',
		'\x4', '\f', '\x4', '\xE', '\x4', '\x44', '\v', '\x4', '\x3', '\x5', '\x3',
		'\x5', '\x3', '\x5', '\a', '\x5', 'I', '\n', '\x5', '\f', '\x5', '\xE',
		'\x5', 'L', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3',
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'U', '\n',
		'\x5', '\x3', '\x5', '\x5', '\x5', 'X', '\n', '\x5', '\x3', '\x5', '\x3',
		'\x5', '\x3', '\x5', '\x5', '\x5', ']', '\n', '\x5', '\x3', '\x6', '\x5',
		'\x6', '`', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5',
		'\x6', '\x65', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', 'h', '\n', '\x6',
		'\a', '\x6', 'j', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'm', '\v', '\x6',
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'r', '\n', '\a', '\x3',
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'x', '\n', '\t',
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3',
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x2', '\x2', '\r', '\x2',
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16',
		'\x2', '\a', '\x3', '\x2', '\b', '\t', '\x4', '\x2', '\t', '\t', '\r',
		'\r', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', '\x14', '\x15', '\x3',
		'\x2', '\x16', '\x17', '\x2', '\x8B', '\x2', '\x1B', '\x3', '\x2', '\x2',
		'\x2', '\x4', '\x36', '\x3', '\x2', '\x2', '\x2', '\x6', ';', '\x3', '\x2',
		'\x2', '\x2', '\b', '\\', '\x3', '\x2', '\x2', '\x2', '\n', '_', '\x3',
		'\x2', '\x2', '\x2', '\f', 'n', '\x3', '\x2', '\x2', '\x2', '\xE', 's',
		'\x3', '\x2', '\x2', '\x2', '\x10', 'w', '\x3', '\x2', '\x2', '\x2', '\x12',
		'y', '\x3', '\x2', '\x2', '\x2', '\x14', '{', '\x3', '\x2', '\x2', '\x2',
		'\x16', '~', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x5', '\x4',
		'\x3', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1D',
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2',
		'\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', '\x2',
		'\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', ' ',
		'\a', '\x5', '\x2', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2',
		'\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '$', '\x3', '\x2', '\x2',
		'\x2', '!', '#', '\x5', '\x4', '\x3', '\x2', '\"', '!', '\x3', '\x2',
		'\x2', '\x2', '#', '&', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3',
		'\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '(', '\x3',
		'\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '\'', ')',
		'\a', '\a', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', '(',
		')', '\x3', '\x2', '\x2', '\x2', ')', '-', '\x3', '\x2', '\x2', '\x2',
		'*', ',', '\x5', '\x4', '\x3', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2',
		',', '/', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2',
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '\x33', '\x3', '\x2', '\x2',
		'\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\x5', '\x6',
		'\x4', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35',
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2',
		'\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x3', '\x3', '\x2',
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37',
		'\t', '\x2', '\x2', '\x2', '\x37', '\x5', '\x3', '\x2', '\x2', '\x2',
		'\x38', ':', '\x5', '\x10', '\t', '\x2', '\x39', '\x38', '\x3', '\x2',
		'\x2', '\x2', ':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3',
		'\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3',
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '\x42',
		'\x5', '\b', '\x5', '\x2', '?', '\x41', '\x5', '\x10', '\t', '\x2', '@',
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2',
		'\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3',
		'\x2', '\x2', '\x2', '\x43', '\a', '\x3', '\x2', '\x2', '\x2', '\x44',
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\f', '\x2',
		'\x2', '\x46', 'J', '\a', '\x12', '\x2', '\x2', 'G', 'I', '\x5', '\f',
		'\a', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2',
		'\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2',
		'\x2', '\x2', 'K', 'W', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2',
		'\x2', '\x2', 'M', 'T', '\a', '\xE', '\x2', '\x2', 'N', 'O', '\x5', '\n',
		'\x6', '\x2', 'O', 'P', '\a', '\f', '\x2', '\x2', 'P', 'Q', '\a', '\x10',
		'\x2', '\x2', 'Q', 'R', '\a', '\x12', '\x2', '\x2', 'R', 'S', '\a', '\xE',
		'\x2', '\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'N', '\x3', '\x2',
		'\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2',
		'\x2', '\x2', 'V', 'X', '\a', '\xF', '\x2', '\x2', 'W', 'M', '\x3', '\x2',
		'\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'X', ']', '\x3', '\x2',
		'\x2', '\x2', 'Y', ']', '\a', '\b', '\x2', '\x2', 'Z', ']', '\x5', '\x14',
		'\v', '\x2', '[', ']', '\x5', '\x16', '\f', '\x2', '\\', '\x45', '\x3',
		'\x2', '\x2', '\x2', '\\', 'Y', '\x3', '\x2', '\x2', '\x2', '\\', 'Z',
		'\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']',
		'\t', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x5', '\xE', '\b', '\x2',
		'_', '^', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2',
		'`', 'k', '\x3', '\x2', '\x2', '\x2', '\x61', '\x65', '\x5', '\b', '\x5',
		'\x2', '\x62', '\x65', '\a', '\x6', '\x2', '\x2', '\x63', '\x65', '\x5',
		'\x12', '\n', '\x2', '\x64', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64',
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2',
		'\x2', '\x65', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x5', '\xE',
		'\b', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3',
		'\x2', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 'i', '\x64',
		'\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k',
		'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2',
		'l', '\v', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2',
		'\x2', 'n', 'q', '\a', '\x12', '\x2', '\x2', 'o', 'p', '\a', '\x11', '\x2',
		'\x2', 'p', 'r', '\a', '\x18', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2',
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '\r', '\x3', '\x2',
		'\x2', '\x2', 's', 't', '\t', '\x3', '\x2', '\x2', 't', '\xF', '\x3',
		'\x2', '\x2', '\x2', 'u', 'x', '\x5', '\x12', '\n', '\x2', 'v', 'x', '\a',
		'\t', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3',
		'\x2', '\x2', '\x2', 'x', '\x11', '\x3', '\x2', '\x2', '\x2', 'y', 'z',
		'\t', '\x4', '\x2', '\x2', 'z', '\x13', '\x3', '\x2', '\x2', '\x2', '{',
		'|', '\a', '\n', '\x2', '\x2', '|', '}', '\t', '\x5', '\x2', '\x2', '}',
		'\x15', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', '\v', '\x2', '\x2',
		'\x7F', '\x80', '\t', '\x6', '\x2', '\x2', '\x80', '\x17', '\x3', '\x2',
		'\x2', '\x2', '\x14', '\x1B', '\x1F', '$', '(', '-', '\x33', ';', '\x42',
		'J', 'T', 'W', '\\', '_', '\x64', 'g', 'k', 'q', 'w',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
